#lang racket
(define (carmichael n)
  (carmi 561 n))
(define (carmi x n)
  (cond ( (= n 0) (- x 1))
        ( (is-prime x 2) (carmi (+ x 1) n))
        ( (iscarmi x 2)  (carmi ( + x 1) (- n 1)))
        ( #t (carmi (+ x 1) n))))
(define (is-prime n i)
  (cond ((> i (sqrt n)) #t)
        (( = (modulo n i) 0) #f)
        (#t (is-prime n (+ 1 i)))))
(define (iscarmi n i)
  (cond ((= i n) #t)
        ( (not(= (gcd n i) 1)) (iscarmi n (+ 1 i)))
        ( (= (modexp i (- n 1) n) 1) (iscarmi n (+ 1 i)))
        ( else #f)))
(define (modexp x y n)
  (cond ((= y 0) 1)
        ((= (remainder y 2) 0) (modexp (modulo (* x x) n) (/ y 2)n))
        (#t (modulo (* x (modexp x (- y 1) n)) n))))
(define (gcd a b)
  (cond ((= b 0) a)
        (else (gcd b (modulo a b)))))
